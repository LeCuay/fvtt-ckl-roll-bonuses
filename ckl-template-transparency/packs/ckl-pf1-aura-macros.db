{"_id":"0CnfHtmYcBEVs3u5","name":"Aura Handler","type":"script","author":"nAIClXMrmfpoVqhM","img":"icons/svg/cancel.svg","scope":"global","command":"debugger;\nif (state) {\n    const feature = token.actor.data.items.find(x => x.name === item.name && x.type === 'feat');\n\n    const updatedValue = feature.data.data.uses.value - RollPF.safeTotal(feature.data.data.activation.cost);\n    if (updatedValue < 0) {\n        ui.notifications.error(`You don't have enough charges remaining for ${item.name}.`);\n        //item.\n        return;\n    }\n    await feature.update({ 'data.uses.value': updatedValue });\n\n    feature.roll();\n\n    if (!token) {\n        return;\n    }\n\n    const range = +feature?.data?.data?.range?.value;\n    if (!range) {\n        return;\n    }\n\n    const key = `${token.name}-${feature.name}`;\n    const templateKey = `template_${key}`;\n    const currentId = await token.document.getFlag('world', templateKey)\n    if (currentId) {\n        const currentTemplate = canvas.templates.get(currentId);\n        if (currentTemplate) {\n            return;\n        }\n    }\n\n    const actorSquares = Math.max(1, token.actor.data.data.size - 3);\n\n    const templates = await canvas.scene.createEmbeddedDocuments(\n        \"MeasuredTemplate\",\n        [{\n            t: 'circle',\n            user: game.user.id,\n            ...token.center,\n            distance: range + (actorSquares * 5 / 2),\n            borderColor: \"#000000\",\n            fillColor: \"#000000\",\n        }]);\n    const template = templates[0];\n\n    await token.document.setFlag('world', templateKey, template.data._id);\n\n    if (tokenAttacher) {\n        await tokenAttacher.attachElementToToken(template, token, suppressNotification=true);\n    }\n\n    await template.setFlag('world', 'borderOpacity', 0);\n//     await template.setFlag('world', 'fillOpacity', 0);\n}\nelse {\n    if (Sequencer) {\n        const animationSequencerKey = `${token.name}-${item.name.toLowerCase()}`;\n//        Sequencer.EffectManager.endEffects({object: token, name: animationSequencerKey });\n        Sequencer.EffectManager.endEffects({ name: animationSequencerKey });\n    }\n\n    const key = `${token.name}-${item.name}`;\n    const templateKey = `template_${key}`;\n    const currentId = await token.document.getFlag('world', templateKey)\n    if (currentId) {\n        const currentTemplate = canvas.templates.get(currentId);\n        if (currentTemplate) {\n            await currentTemplate.delete();\n        }\n    }\n}","folder":null,"sort":0,"permission":{"default":0,"nAIClXMrmfpoVqhM":3},"flags":{"core":{"sourceId":"Macro.XAcCdH5nKDYNgrSU"}}}
{"_id":"Cgd9TFVA4vC4bIZz","name":"Create Trackable Aura","type":"script","author":"nAIClXMrmfpoVqhM","img":"icons/svg/d6-grey.svg","scope":"global","command":"if (!token) {\n    return;\n}\n\n// add trackable buff\nconst buff = token.actor.data.items.find(x => x.name === item.name && x.type === 'buff');\nif (!buff) {\n    const getTrackableBuffAsync = async () => {\n        const pack = game.packs.get(\"ckl-template-transparency.ckl-pf1-aura-buffs\");\n        if (!pack.indexed) {\n            await pack.getIndex();\n        }\n        return pack.getDocument('dugfijvxeSEWhWob');\n    }\n\n    const fromCompendium = await getTrackableBuffAsync();\n    const clonedBuff = duplicate(fromCompendium);\n    clonedBuff.name = item.name;\n    clonedBuff.data.flags.dictionary.push([\"resourceDrain\", `${item.data.data.tag}:1`]);\n    clonedBuff.data.tag = `${item.data.data.tag}Buff`;\n\n    await token.actor.createOwnedItem(clonedBuff);\n}\nelse {\n    await buff.update({ \"data.active\": true });\n}\n\n// refund the point spent and let the buff activation toggle it instead\n\nconst updatedValue = item.data.data.uses.value + RollPF.safeTotal(item.data.data.activation.cost);\nawait item.update({ 'data.uses.value': updatedValue });","folder":null,"sort":0,"permission":{"default":0,"nAIClXMrmfpoVqhM":3},"flags":{"core":{"sourceId":"Macro.f4anYbsVeyTfORaH"}}}
